{"version":3,"sources":["webpack:///skeleton/Avatar.jsx","webpack:///skeleton/Title.jsx","webpack:///skeleton/Paragraph.jsx","webpack:///skeleton/index.jsx","webpack:///../node_modules/@antv/gatsby-theme-antv/site/components/PageLoading.tsx","webpack:///../node_modules/@antv/gatsby-theme-antv/site/components/RedirectIndex.tsx","webpack:///../node_modules/@antv/gatsby-theme-antv/site/pages/index.tsx"],"names":["SkeletonAvatar","this","prefixCls","className","style","size","shape","sizeCls","classNames","shapeCls","sizeStyle","width","height","lineHeight","React","index","rows","Array","rowList","key","getComponentProps","prop","Skeleton","getPrefixCls","customizePrefixCls","loading","children","avatar","title","paragraph","active","hasAvatar","hasTitle","hasParagraph","avatarProps","getAvatarBasicProps","avatarNode","titleProps","getTitleBasicProps","$title","paragraphProps","basicProps","getParagraphBasicProps","paragraphNode","contentNode","cls","PageLoading","padding","RedirectIndex","args","window","langKey","getUserLangKey","navigate","render","PureComponent","Page","noLayout"],"mappings":"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","file":"component---node-modules-antv-gatsby-theme-antv-site-pages-index-tsx-fe994acc74aabf5540de.js","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\n// eslint-disable-next-line react/prefer-stateless-function\nclass SkeletonAvatar extends React.Component {\n    render() {\n        const { prefixCls, className, style, size, shape } = this.props;\n        const sizeCls = classNames({\n            [`${prefixCls}-lg`]: size === 'large',\n            [`${prefixCls}-sm`]: size === 'small',\n        });\n        const shapeCls = classNames({\n            [`${prefixCls}-circle`]: shape === 'circle',\n            [`${prefixCls}-square`]: shape === 'square',\n        });\n        const sizeStyle = typeof size === 'number'\n            ? {\n                width: size,\n                height: size,\n                lineHeight: `${size}px`,\n            }\n            : {};\n        return (<span className={classNames(prefixCls, className, sizeCls, shapeCls)} style={Object.assign(Object.assign({}, sizeStyle), style)}/>);\n    }\n}\nSkeletonAvatar.defaultProps = {\n    size: 'large',\n};\nexport default SkeletonAvatar;\n","/* eslint-disable jsx-a11y/heading-has-content */\nimport * as React from 'react';\nimport classNames from 'classnames';\nconst Title = ({ prefixCls, className, width, style }) => (<h3 className={classNames(prefixCls, className)} style={Object.assign({ width }, style)}/>);\nexport default Title;\n","import * as React from 'react';\nimport classNames from 'classnames';\nclass Paragraph extends React.Component {\n    getWidth(index) {\n        const { width, rows = 2 } = this.props;\n        if (Array.isArray(width)) {\n            return width[index];\n        }\n        // last paragraph\n        if (rows - 1 === index) {\n            return width;\n        }\n        return undefined;\n    }\n    render() {\n        const { prefixCls, className, style, rows } = this.props;\n        const rowList = [...Array(rows)].map((_, index) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <li key={index} style={{ width: this.getWidth(index) }}/>));\n        return (<ul className={classNames(prefixCls, className)} style={style}>\n        {rowList}\n      </ul>);\n    }\n}\nexport default Paragraph;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport Avatar from './Avatar';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nimport { ConfigConsumer } from '../config-provider';\nfunction getComponentProps(prop) {\n    if (prop && typeof prop === 'object') {\n        return prop;\n    }\n    return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n    if (hasTitle && !hasParagraph) {\n        return { shape: 'square' };\n    }\n    return { shape: 'circle' };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n    if (!hasAvatar && hasParagraph) {\n        return { width: '38%' };\n    }\n    if (hasAvatar && hasParagraph) {\n        return { width: '50%' };\n    }\n    return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n    const basicProps = {};\n    // Width\n    if (!hasAvatar || !hasTitle) {\n        basicProps.width = '61%';\n    }\n    // Rows\n    if (!hasAvatar && hasTitle) {\n        basicProps.rows = 3;\n    }\n    else {\n        basicProps.rows = 2;\n    }\n    return basicProps;\n}\nclass Skeleton extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderSkeleton = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, loading, className, children, avatar, title, paragraph, active, } = this.props;\n            const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n            if (loading || !('loading' in this.props)) {\n                const hasAvatar = !!avatar;\n                const hasTitle = !!title;\n                const hasParagraph = !!paragraph;\n                // Avatar\n                let avatarNode;\n                if (hasAvatar) {\n                    const avatarProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-avatar` }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n                    avatarNode = (<div className={`${prefixCls}-header`}>\n            <Avatar {...avatarProps}/>\n          </div>);\n                }\n                let contentNode;\n                if (hasTitle || hasParagraph) {\n                    // Title\n                    let $title;\n                    if (hasTitle) {\n                        const titleProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-title` }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n                        $title = <Title {...titleProps}/>;\n                    }\n                    // Paragraph\n                    let paragraphNode;\n                    if (hasParagraph) {\n                        const paragraphProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-paragraph` }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n                        paragraphNode = <Paragraph {...paragraphProps}/>;\n                    }\n                    contentNode = (<div className={`${prefixCls}-content`}>\n            {$title}\n            {paragraphNode}\n          </div>);\n                }\n                const cls = classNames(prefixCls, className, {\n                    [`${prefixCls}-with-avatar`]: hasAvatar,\n                    [`${prefixCls}-active`]: active,\n                });\n                return (<div className={cls}>\n          {avatarNode}\n          {contentNode}\n        </div>);\n            }\n            return children;\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderSkeleton}</ConfigConsumer>;\n    }\n}\nSkeleton.defaultProps = {\n    avatar: false,\n    title: true,\n    paragraph: true,\n};\nexport default Skeleton;\n","import React from 'react';\nimport { Skeleton } from 'antd';\n\nconst PageLoading = () => (\n  <div style={{ padding: '100px 20% 0' }}>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </div>\n);\n\nexport default PageLoading;\n","import React from 'react';\nimport { navigate } from 'gatsby';\nimport { getUserLangKey } from 'ptz-i18n';\nimport PageLoading from './PageLoading';\n\nclass RedirectIndex extends React.PureComponent {\n  constructor(args: any) {\n    super(args);\n\n    // Skip build, Browsers only\n    if (typeof window !== 'undefined') {\n      const langKey = getUserLangKey(['zh', 'en'], 'zh');\n      // https://github.com/angeloocana/gatsby-plugin-i18n/issues/52#issuecomment-451590961\n      navigate(langKey);\n    }\n  }\n\n  render() {\n    return <PageLoading />;\n  }\n}\n\nexport default RedirectIndex;\n","import React from 'react';\nimport RedirectIndex from '../components/RedirectIndex';\n\nconst Page = () => <RedirectIndex />;\n\nPage.noLayout = true;\n\nexport default Page;\n"],"sourceRoot":""}